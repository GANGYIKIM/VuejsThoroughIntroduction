{"remainingRequest":"C:\\Users\\hjjeon\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\hjjeon\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\hjjeon\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\hjjeon\\dev\\vuejs\\test\\vuex\\App.vue?vue&type=template&id=472cff63&","dependencies":[{"path":"C:\\Users\\hjjeon\\dev\\vuejs\\test\\vuex\\App.vue","mtime":1609924929703},{"path":"C:\\Users\\hjjeon\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hjjeon\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\hjjeon\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hjjeon\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"h2\", [_vm._v(\"태스크 목록\")]),\n    _c(\n      \"ul\",\n      _vm._l(_vm.tasks, function(task) {\n        return _c(\n          \"li\",\n          { key: task.id },\n          [\n            _c(\"input\", {\n              attrs: { type: \"checkbox\" },\n              domProps: { checked: task.done },\n              on: {\n                change: function($event) {\n                  return _vm.toggleTaskStatus(task)\n                }\n              }\n            }),\n            _vm._v(\"\\r\\n      \" + _vm._s(task.name) + \" -\\r\\n      \"),\n            _vm._l(task.labelIds, function(id) {\n              return _c(\"span\", { key: id }, [\n                _vm._v(\n                  \"\\r\\n        \" + _vm._s(_vm.getLabelText(id)) + \"\\r\\n      \"\n                )\n              ])\n            })\n          ],\n          2\n        )\n      }),\n      0\n    ),\n    _c(\n      \"form\",\n      {\n        on: {\n          submit: function($event) {\n            $event.preventDefault()\n            return _vm.addTask($event)\n          }\n        }\n      },\n      [\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.newTaskName,\n              expression: \"newTaskName\"\n            }\n          ],\n          attrs: { type: \"text\", placeholder: \"new task\" },\n          domProps: { value: _vm.newTaskName },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.newTaskName = $event.target.value\n            }\n          }\n        })\n      ]\n    ),\n    _c(\"h2\", [_vm._v(\"레이블 목록\")]),\n    _c(\n      \"ul\",\n      _vm._l(_vm.labels, function(label) {\n        return _c(\"li\", { key: label.id }, [\n          _c(\"input\", {\n            directives: [\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.newTaskLabelIds,\n                expression: \"newTaskLabelIds\"\n              }\n            ],\n            attrs: { type: \"checkbox\" },\n            domProps: {\n              value: label.id,\n              checked: Array.isArray(_vm.newTaskLabelIds)\n                ? _vm._i(_vm.newTaskLabelIds, label.id) > -1\n                : _vm.newTaskLabelIds\n            },\n            on: {\n              change: function($event) {\n                var $$a = _vm.newTaskLabelIds,\n                  $$el = $event.target,\n                  $$c = $$el.checked ? true : false\n                if (Array.isArray($$a)) {\n                  var $$v = label.id,\n                    $$i = _vm._i($$a, $$v)\n                  if ($$el.checked) {\n                    $$i < 0 && (_vm.newTaskLabelIds = $$a.concat([$$v]))\n                  } else {\n                    $$i > -1 &&\n                      (_vm.newTaskLabelIds = $$a\n                        .slice(0, $$i)\n                        .concat($$a.slice($$i + 1)))\n                  }\n                } else {\n                  _vm.newTaskLabelIds = $$c\n                }\n              }\n            }\n          }),\n          _vm._v(\"\\r\\n      \" + _vm._s(label.text) + \"\\r\\n    \")\n        ])\n      }),\n      0\n    ),\n    _c(\n      \"form\",\n      {\n        on: {\n          submit: function($event) {\n            $event.preventDefault()\n            return _vm.addLabel($event)\n          }\n        }\n      },\n      [\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.newLabelText,\n              expression: \"newLabelText\"\n            }\n          ],\n          attrs: { type: \"text\", placeholder: \"new label\" },\n          domProps: { value: _vm.newLabelText },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.newLabelText = $event.target.value\n            }\n          }\n        })\n      ]\n    ),\n    _c(\"h2\", [_vm._v(\"레이블로 필터링된 목록\")]),\n    _c(\n      \"ul\",\n      [\n        _vm._l(_vm.labels, function(label) {\n          return _c(\"li\", { key: label.id }, [\n            _c(\"input\", {\n              attrs: { type: \"radio\" },\n              domProps: { checked: label.id === _vm.filter },\n              on: {\n                change: function($event) {\n                  return _vm.changeFilter(label.id)\n                }\n              }\n            }),\n            _vm._v(\"\\r\\n      \" + _vm._s(label.text) + \"\\r\\n    \")\n          ])\n        }),\n        _c(\"li\", [\n          _c(\"input\", {\n            attrs: { type: \"radio\" },\n            domProps: { checked: _vm.filter === null },\n            on: {\n              change: function($event) {\n                return _vm.changeFilter(null)\n              }\n            }\n          }),\n          _vm._v(\"\\r\\n      필터링 없음\\r\\n    \")\n        ])\n      ],\n      2\n    ),\n    _c(\n      \"form\",\n      {\n        on: {\n          submit: function($event) {\n            $event.preventDefault()\n            return _vm.addLabel($event)\n          }\n        }\n      },\n      [\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.newLabelText,\n              expression: \"newLabelText\"\n            }\n          ],\n          attrs: { type: \"text\", placeholder: \"new label\" },\n          domProps: { value: _vm.newLabelText },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.newLabelText = $event.target.value\n            }\n          }\n        })\n      ]\n    ),\n    _c(\"h2\", [_vm._v(\"저장 및 복원\")]),\n    _c(\"button\", { attrs: { type: \"button\" }, on: { click: _vm.save } }, [\n      _vm._v(\"저장\")\n    ]),\n    _c(\"button\", { attrs: { type: \"button\" }, on: { click: _vm.restore } }, [\n      _vm._v(\"복원\")\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}